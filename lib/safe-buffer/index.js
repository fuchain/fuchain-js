"use strict"; /* eslint-disable node/no-deprecated-api */
var buffer = require("buffer");
var Buffer = buffer.Buffer;

// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (
Buffer.from &&
Buffer.alloc &&
Buffer.allocUnsafe &&
Buffer.allocUnsafeSlow)
{
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === "number") {
    throw new TypeError("Argument must not be a number");
  }
  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== "number") {
    throw new TypeError("Argument must be a number");
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === "string") {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== "number") {
    throw new TypeError("Argument must be a number");
  }
  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== "number") {
    throw new TypeError("Argument must be a number");
  }
  return buffer.SlowBuffer(size);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlLWJ1ZmZlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJidWZmZXIiLCJyZXF1aXJlIiwiQnVmZmVyIiwiY29weVByb3BzIiwic3JjIiwiZHN0Iiwia2V5IiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJtb2R1bGUiLCJleHBvcnRzIiwiU2FmZUJ1ZmZlciIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwidW5kZWZpbmVkIiwiU2xvd0J1ZmZlciJdLCJtYXBwaW5ncyI6ImNBQUE7QUFDQSxJQUFJQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXBCO0FBQ0EsSUFBSUMsTUFBTSxHQUFHRixNQUFNLENBQUNFLE1BQXBCOztBQUVBO0FBQ0EsU0FBU0MsU0FBVCxDQUFtQkMsR0FBbkIsRUFBd0JDLEdBQXhCLEVBQTZCO0FBQ3pCLE9BQUssSUFBSUMsR0FBVCxJQUFnQkYsR0FBaEIsRUFBcUI7QUFDakJDLElBQUFBLEdBQUcsQ0FBQ0MsR0FBRCxDQUFILEdBQVdGLEdBQUcsQ0FBQ0UsR0FBRCxDQUFkO0FBQ0g7QUFDSjtBQUNEO0FBQ0lKLE1BQU0sQ0FBQ0ssSUFBUDtBQUNBTCxNQUFNLENBQUNNLEtBRFA7QUFFQU4sTUFBTSxDQUFDTyxXQUZQO0FBR0FQLE1BQU0sQ0FBQ1EsZUFKWDtBQUtFO0FBQ0VDLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlosTUFBakI7QUFDSCxDQVBELE1BT087QUFDSDtBQUNBRyxFQUFBQSxTQUFTLENBQUNILE1BQUQsRUFBU1ksT0FBVCxDQUFUO0FBQ0FBLEVBQUFBLE9BQU8sQ0FBQ1YsTUFBUixHQUFpQlcsVUFBakI7QUFDSDs7QUFFRCxTQUFTQSxVQUFULENBQW9CQyxHQUFwQixFQUF5QkMsZ0JBQXpCLEVBQTJDQyxNQUEzQyxFQUFtRDtBQUMvQyxTQUFPZCxNQUFNLENBQUNZLEdBQUQsRUFBTUMsZ0JBQU4sRUFBd0JDLE1BQXhCLENBQWI7QUFDSDs7QUFFRDtBQUNBYixTQUFTLENBQUNELE1BQUQsRUFBU1csVUFBVCxDQUFUOztBQUVBQSxVQUFVLENBQUNOLElBQVgsR0FBa0IsVUFBU08sR0FBVCxFQUFjQyxnQkFBZCxFQUFnQ0MsTUFBaEMsRUFBd0M7QUFDdEQsTUFBSSxPQUFPRixHQUFQLEtBQWUsUUFBbkIsRUFBNkI7QUFDekIsVUFBTSxJQUFJRyxTQUFKLENBQWMsK0JBQWQsQ0FBTjtBQUNIO0FBQ0QsU0FBT2YsTUFBTSxDQUFDWSxHQUFELEVBQU1DLGdCQUFOLEVBQXdCQyxNQUF4QixDQUFiO0FBQ0gsQ0FMRDs7QUFPQUgsVUFBVSxDQUFDTCxLQUFYLEdBQW1CLFVBQVNVLElBQVQsRUFBZUMsSUFBZixFQUFxQkMsUUFBckIsRUFBK0I7QUFDOUMsTUFBSSxPQUFPRixJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzFCLFVBQU0sSUFBSUQsU0FBSixDQUFjLDJCQUFkLENBQU47QUFDSDtBQUNELE1BQUlJLEdBQUcsR0FBR25CLE1BQU0sQ0FBQ2dCLElBQUQsQ0FBaEI7QUFDQSxNQUFJQyxJQUFJLEtBQUtHLFNBQWIsRUFBd0I7QUFDcEIsUUFBSSxPQUFPRixRQUFQLEtBQW9CLFFBQXhCLEVBQWtDO0FBQzlCQyxNQUFBQSxHQUFHLENBQUNGLElBQUosQ0FBU0EsSUFBVCxFQUFlQyxRQUFmO0FBQ0gsS0FGRCxNQUVPO0FBQ0hDLE1BQUFBLEdBQUcsQ0FBQ0YsSUFBSixDQUFTQSxJQUFUO0FBQ0g7QUFDSixHQU5ELE1BTU87QUFDSEUsSUFBQUEsR0FBRyxDQUFDRixJQUFKLENBQVMsQ0FBVDtBQUNIO0FBQ0QsU0FBT0UsR0FBUDtBQUNILENBZkQ7O0FBaUJBUixVQUFVLENBQUNKLFdBQVgsR0FBeUIsVUFBU1MsSUFBVCxFQUFlO0FBQ3BDLE1BQUksT0FBT0EsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUMxQixVQUFNLElBQUlELFNBQUosQ0FBYywyQkFBZCxDQUFOO0FBQ0g7QUFDRCxTQUFPZixNQUFNLENBQUNnQixJQUFELENBQWI7QUFDSCxDQUxEOztBQU9BTCxVQUFVLENBQUNILGVBQVgsR0FBNkIsVUFBU1EsSUFBVCxFQUFlO0FBQ3hDLE1BQUksT0FBT0EsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUMxQixVQUFNLElBQUlELFNBQUosQ0FBYywyQkFBZCxDQUFOO0FBQ0g7QUFDRCxTQUFPakIsTUFBTSxDQUFDdUIsVUFBUCxDQUFrQkwsSUFBbEIsQ0FBUDtBQUNILENBTEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyO1xuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMoc3JjLCBkc3QpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgfVxufVxuaWYgKFxuICAgIEJ1ZmZlci5mcm9tICYmXG4gICAgQnVmZmVyLmFsbG9jICYmXG4gICAgQnVmZmVyLmFsbG9jVW5zYWZlICYmXG4gICAgQnVmZmVyLmFsbG9jVW5zYWZlU2xvd1xuKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXI7XG59IGVsc2Uge1xuICAgIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gICAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cyk7XG4gICAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyO1xufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCk7XG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpO1xuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgYXJnID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlclwiKTtcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCk7XG59O1xuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24oc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgICBpZiAodHlwZW9mIHNpemUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgfVxuICAgIHZhciBidWYgPSBCdWZmZXIoc2l6ZSk7XG4gICAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWYuZmlsbChmaWxsKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1Zi5maWxsKDApO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xufTtcblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICBpZiAodHlwZW9mIHNpemUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIoc2l6ZSk7XG59O1xuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgICBpZiAodHlwZW9mIHNpemUgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKTtcbn07XG4iXX0=